/*
  baselinegrid.scss | MIT License | https://github.com/jeromev/baselinegrid.scss
  -----------------------------------------------------------------------------
  A modern SCSS toolkit for aligning text and layout to a baseline grid.
  Features responsive scaling, typographic precision, and utility mixins.
  -----------------------------------------------------------------------------
  USAGE:
    @use 'path/to/_baselinegrid.scss' as *;
    .my-class { @include set(20px); }
    .container { @include pad-scale(); }
  -----------------------------------------------------------------------------
*/

//==================================================================================
// LIBRARIES (SASS MODULES)
//==================================================================================
@use "sass:map";
@use "sass:math";

//==================================================================================
// CONFIGURATION OPTIONS
//==================================================================================
// Responsive scale map: defines font-size, line-height, min-width, and padding for breakpoints.
// Adjust these values to fit your design system.
$scale: (
  'xs': (
    'font-size': 16px, // Base font size for smallest screens
    'line-height': 26px, // Should be an even integer for best Chrome rendering
    'min-width': 0, // px, applies to all widths
    'pad': 1 // grid-units for padding
  ),
  's': (
    'font-size': 17px,
    'line-height': 28px,
    'min-width': 375px,
    'pad': 2
  ),
  'm': (
    'font-size': 19px,
    'line-height': 30px,
    'min-width': 600px,
    'pad': 3
  ),
  'l': (
    'font-size': 21px,
    'line-height': 32px,
    'min-width': 800px,
    'pad': 4
  ),
  'xl': (
    'font-size': 22px,
    'line-height': 34px,
    'min-width': 1024px,
    'pad': 5
  ),
  'xxl': (
    'font-size': 23px,
    'line-height': 36px,
    'min-width': 1600px,
    'pad': 8
  )
) !default;

// Optical adjustment for horizontal grid units (tweak for visual balance)
$width-optical-adjustment: 1.1 !default;  // relative to 1 vertical grid-unit
$right-side-adjustment: 0.8 !default;     // relative to 1 horizontal grid-unit (typo fixed)
$debug: 0 !default;                       // Set to 1 to show grid overlay
$preset: 'Georgia' !default;              // Font metrics preset (expandable)

//==================================================================================
// PRIVATE VARIABLES (do not override directly)
//==================================================================================
// These are derived from the scale and preset, and used internally.
$_base-font-size: map.get(map.get($scale, 'xs'), 'font-size'); // px
$_base-scale: 2; // Number of vertical grid units per line
$_base-unit: math.div(map.get(map.get($scale, 'xs'), 'line-height'), $_base-scale); // px

//==================================================================================
// FONT METRICS PRESETS (expand for more fonts)
//==================================================================================
$_presets: (
  'Georgia': (
    'EmSize': 2048,
    'CapHeight': 1419, // 0.6928
    'XHeight': 986,
    'Ascent': 1878, // 0.917
    'Descent': 449, // 0.219
    'LineGap': 198
  )
);
// Metrics calculations for vertical alignment (relative to font-size)
$_line-height-normal: math.div(
  map.get(map.get($_presets, $preset), 'Ascent') +
  map.get(map.get($_presets, $preset), 'Descent') +
  map.get(map.get($_presets, $preset), 'LineGap'),
  map.get(map.get($_presets, $preset), 'EmSize')
);
$_content-area: math.div(
  $_line-height-normal * map.get(map.get($_presets, $preset), 'CapHeight'),
  map.get(map.get($_presets, $preset), 'EmSize')
);
$_distance-top: math.div(
  map.get(map.get($_presets, $preset), 'Ascent') - map.get(map.get($_presets, $preset), 'CapHeight'),
  map.get(map.get($_presets, $preset), 'EmSize')
);
$_distance-bottom: math.div(
  map.get(map.get($_presets, $preset), 'Descent'),
  map.get(map.get($_presets, $preset), 'EmSize')
);
$_vertical-align: $_distance-bottom - $_distance-top;

//==================================================================================
// UTILITY FUNCTIONS
//==================================================================================
// Convert px to em units (relative to font-size)
@function em($px, $font-size: $_base-font-size) {
  @return math.div($px, $font-size) + em;
}
// Convert px to rem units (relative to root font-size)
@function rem($px, $font-size: $_base-font-size) {
  @return math.div($px, $font-size) + rem;
}
// Calculate horizontal grid units (for padding/margin)
@function horizontal-grid-units($q: 1, $px: null) {
  @if ($px) {
    @return math.ceil($q * $_base-unit * $width-optical-adjustment);
  } @else {
    @return calc(#{$q} * var(--base-unit) * #{$width-optical-adjustment});
  }
}
// Short alias for horizontal grid units
@function h($q: 1, $px: null) {
  @return horizontal-grid-units($q, $px);
}
// Horizontal grid units for right side (optically adjusted)
@function h-right($q: 1) {
  @return h($q * $right-side-adjustment);
}
// Calculate vertical grid units (for padding/margin)
@function vertical-grid-units($q: 1) {
  @return calc(#{$q} * var(--base-unit));
}
// Short alias for vertical grid units
@function v($q: 1) {
  @return vertical-grid-units($q);
}
// Get a property from a font preset
@function getFromPreset($preset: 'Georgia', $prop: 'EmSize') {
  @return map.get(map.get($_presets, $preset), $prop);
}
// Get a property from the scale map
@function getFromScale($width: 'xs', $prop: 'font-size') {
  @return map.get(map.get($scale, $width), $prop);
}

//==================================================================================
// MIXINS (PUBLIC API)
//==================================================================================

// Debug mixin: visually highlight an element for debugging grid alignment
@mixin debug($v: 0) {
  @debug "#{$v}";
  background-color: rgba(255,0,0,0.6);
  &:before {
    content: unquote("'" + $v + "'");
    color: white;
    padding: 0 h(0.5);
    position: absolute;
    background-color: red;
    font-weight: normal;
    margin-left: h(-1);
  }
}

// Padding/margin utility mixins (accept grid units as argument)
@mixin pad($q: 1) { padding: v($q) h-right($q) v($q) h($q); }
@mixin marg($q: 1) { margin: v($q) h-right($q) v($q) h($q); }
@mixin padh($q: 1) { padding-right: h-right($q); padding-left: h($q); }
@mixin margh($q: 1) { margin-right: h-right($q); margin-left: h($q); }
@mixin padv($q: 1) { padding-top: v($q); padding-bottom: v($q); }
@mixin margv($q: 1) { margin-top: v($q); margin-bottom: v($q); }

// Responsive padding: applies scale-based padding at breakpoints
@mixin pad-scale() {
  @include pad(getFromScale('xs','pad'));
  @each $size, $props in $scale {
    @if (map.get($props, 'min-width') > 0) {
      @media (min-width: map.get($props, 'min-width')) {
        @include pad(getFromScale($size, 'pad'));
      }
    }
  }
}
// Responsive horizontal padding
@mixin padh-scale() {
  @include padh(getFromScale('xs','pad'));
  @each $size, $props in $scale {
    @if (map.get($props, 'min-width') > 0) {
      @media (min-width: map.get($props, 'min-width')) {
        @include padh(getFromScale($size, 'pad'));
      }
    }
  }
}

// Initialize baseline grid for all elements (call once in your global styles)
@mixin begin() {
  body *:before,
  body *:after {
    display: inline-block;
    vertical-align: baseline;
  }
}

// Override the scale map (for advanced customization)
@mixin set-scale($my-scale: $scale) {
  $scale: $my-scale;
}

// Root mixin: sets CSS custom properties and base font/line-height for the grid
// Call this on :root or html/body to initialize the grid system
@mixin root() {
  --base-font-size: #{getFromScale('xs','font-size')};
  --base-line-height: #{getFromScale('xs','line-height')};
  @each $size, $props in $scale {
    @if (map.get($props, 'min-width') > 0) {
      @media (min-width: map.get($props, 'min-width')) {
        $font-size: getFromScale($size, 'font-size');
        $line-height: getFromScale($size, 'line-height');
        --base-font-size: #{$font-size};
        --base-line-height: #{$line-height};
      }
    }
  }
  --base-unit: calc(var(--base-line-height) / #{$_base-scale});
  font-size: var(--base-font-size);
  line-height: var(--base-line-height);
  @if ($debug == 1) {
    @include show-grid();
  }
}

// Show the baseline grid as a background image (for debugging)
@mixin show-grid() {
  background-image: linear-gradient(
    to bottom,
    rgba(0,0,0,0.2) 0%,
    transparent 10%
  );
  background-size: 100% var(--base-unit);
  background-position: left top;
}

// Set font-size and line-height to align text to the baseline grid
// Usage: @include set(20px); or @include set(20px, 32px);
@mixin set(
  $font-size: $_base-font-size,
  $line-height: $_base-unit
) {
  // Calculate number of base units that fit the font-size
  $lines: math.ceil(math.div($font-size, $_base-unit));
  $line-height: $_base-unit * $lines;

  @if ($font-size != $_base-font-size) {
    font-size: #{$font-size};
    --line-height: calc(var(--base-unit) * #{$lines});
    line-height: var(--line-height);
    &:before, &:after {
      height: var(--line-height);
      content: '';
    }
    &:after {
      vertical-align: calc(var(--line-height) * -1);
    }
    // Responsive adjustments for breakpoints
    @each $size, $props in $scale {
      @if (map.get($props, 'min-width') > 0) {
        @media (min-width: map.get($props, 'min-width')) {
          $base-font-size: getFromScale($size, 'font-size');
          font-size: $font-size;
          $base-unit: math.div(getFromScale($size, 'line-height'), $_base-scale);
          --base-unit: #{$base-unit};
          $lines: math.ceil(math.div($font-size, $base-unit));
          --line-height: calc(var(--base-unit) * #{$lines});
          line-height: var(--line-height);
        }
      }
    }
  } @else {
    &:before, &:after {
      height: var(--base-line-height);
      content: '';
    }
    &:after {
      vertical-align: calc(var(--base-line-height) * -1);
    }
  }
  // Uncomment to apply vertical alignment correction based on font metrics:
  // $translate: $_vertical-align * $font-size;
  // transform: translateY(rem($translate));
}

// Responsive scaling for font-size or other properties
// Usage: @include scale('font-size', (xs: 16px, m: 20px, ...));
@mixin scale($prop: 'font-size', $scale: null) {
  @if ($scale) {
    @if ($prop == 'font-size') {
      @each $size, $font-size in $scale {
        @if (getFromScale($size, 'min-width') > 0) {
          @media (min-width: getFromScale($size, 'min-width')) {
            font-size: $font-size;
            $base-unit: math.div(getFromScale($size, 'line-height'), $_base-scale);
            --base-unit: #{$base-unit};
            $lines: math.ceil(math.div($font-size, $base-unit));
            --line-height: calc(var(--base-unit) * #{$lines});
            line-height: var(--line-height);
          }
        } @else {
          $lines: math.ceil(math.div($font-size, $_base-unit));
          $line-height: $_base-unit * $lines;
          font-size: #{$font-size};
          --line-height: calc(var(--base-unit) * #{$lines});
          line-height: var(--line-height);
        }
      }
      &:before, &:after {
        height: var(--line-height);
        content: '';
      }
      &:after {
        vertical-align: calc(var(--line-height) * -1);
      }
    } @else {
      @each $size, $value in $scale {
        @if (getFromScale($size, 'min-width') > 0) {
          @media (min-width: getFromScale($size, 'min-width')) {
            #{$prop}: $value;
          }
        } @else {
          #{$prop}: $value;
        }
      }
    }
  }
}

//==================================================================================
// LEGACY/EXPERIMENTAL MIXINS (not recommended for new code)
//==================================================================================
// These are kept for reference and backward compatibility.
// Use the main mixins above for new projects.

@mixin align-old(
  $font-size: $_base-font-size,
  $offset-top: 0,
  $offset-bottom: 0,
  $media: null
) {
  $base-font-size: $_base-font-size;
  @if ($media) {
    $base-font-size: map.get($medias-base-font-sizes, $media);
  }
  $lines: math.ceil(math.div($font-size, $_base-unit));
  $line-height: $_base-unit * $lines;
  $baseline-distance: math.div(($_base-unit - $base-cap-height), $_base-scale) * $base-font-size;
  $offset-top: $offset-top * $_base-unit;
  $offset-bottom: $offset-bottom * $_base-unit;
  $padding-top: $baseline-distance + $offset-top;
  $margin-bottom: $line-height - $baseline-distance - $_base-unit + $offset-bottom;
  @include box(
    $font-size,
    $line-height,
    $padding-top,
    $margin-bottom,
    $media,
  );
}

@mixin box(
  $font-size: $_base-font-size,
  $line-height: $_base-unit,
  $padding-top: 0,
  $margin-bottom: 0,
  $media: null,
) {
  @if ($media and map.get($medias, $media)) {
    @media (min-width: h(map.get($medias, $media))) {
      font-size: rem($font-size, map.get($medias-base-font-sizes, $media));
      // line-height: rem($line-height);
      padding-top: rem($padding-top, map.get($medias-base-font-sizes, $media));
      margin-bottom: rem($margin-bottom, map.get($medias-base-font-sizes, $media));
    }
  } @else {
    font-size: rem($font-size);
    line-height: rem($line-height);
    padding-top: rem($padding-top);
    padding-bottom: rem($margin-bottom);
    vertical-align: rem($_vertical-align * $font-size);
    // @if ($debug == 1) { @include debug($font-size); }
  }
}

//==================================================================================
// END OF baselinegrid.scss
//==================================================================================
